@if(ItemCount > PageSize)
{
    <nav aria-label="...">
    
    <ul class="pagination">

        <li class="page-item @( IsPrevEnabled() ?"disabled" : "")">
            <a class="page-link" 
            tabindex="-1"
                   @onclick="OnPagePrevClickEvent">Previous</a>
        </li>

            @foreach (var row in GetListPagination())
            {
                <li class="page-item">
                    <a class="page-link @( IsCurrentPage(row.Item1) ? "active" : "")"
                       @onclick="(e) => OnPageClickEvent(e, row.Item1)">@row.Item2</a>
                </li>
            }

        <li class="page-item @(IsNextEnabled() ? "disabled" : "" )">
                <a class="page-link" @onclick="OnPageNextClickEvent">Next</a>
        </li>

    </ul>
</nav>    
}

@code {
    public record PaginationDTO(int page , int skip, int take);
    
    [Parameter] public int ItemCount { get; set; }

    [Parameter] 
    public EventCallback<PaginationDTO> OnPageChangedCallBack { get; set; }
    
    [Parameter] public int PageSize { get; set; }

    private int CurrentPage { get; set; }

    private bool IsCurrentPage(int i)
        => CurrentPage == i;

    private bool IsPrevEnabled()
        => CurrentPage == 1;

    private bool IsNextEnabled()
        => CurrentPage >= (ItemCount / PageSize) + 1;

    private List<Tuple<int , string>> GetListPagination()
    {
        List<Tuple<int, string>> result = new();
        for(int i = 0; i< (ItemCount/PageSize)+1; i++)
        {
            result.Add(new(i + 1, (i + 1).ToString()) );
        }
        return result;
    }

    protected override Task OnInitializedAsync()
    {
        OnPageClick(1);
        return base.OnInitializedAsync();
    }

    private void OnPageClick(int page)
    {
        if (page != CurrentPage)
        {
            CurrentPage = page;
            OnPageChangedCallBack.InvokeAsync(new(page, (page * PageSize) - PageSize, PageSize));
        }
    }

    private void OnPageClickEvent(MouseEventArgs eventArgs, int page)
        => OnPageClick(page);

    private void OnPageNextClickEvent(MouseEventArgs eventArgs)
        => OnPageClick(CurrentPage+1);

    private void OnPagePrevClickEvent(MouseEventArgs eventArgs)
        => OnPageClick(CurrentPage - 1);
    

    protected override void OnInitialized()
    {
        CurrentPage = 1;
        OnPageChangedCallBack.InvokeAsync(new(1, (1 * PageSize) - PageSize, PageSize));
    }
}
