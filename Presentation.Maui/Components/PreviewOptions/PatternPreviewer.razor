@namespace Presentation.Maui.Components.PreviewOptions
@using ApplicationService.Contracts
@using ApplicationService.Interfaces
@using Presentation.Maui.Service

<div class="border rounded p-3">
    
    <div class="form-check">
        <input class="form-check-input"
               type="radio"
               name="radioPattern"
               @onchange="(e) => CheckedValueChanged(e, 0)"
               checked="true">
        <label class="form-check-label">
            ReplaceText
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input"
               type="radio"
               name="radioPattern"
               @onchange="(e) => CheckedValueChanged(e, 1)"
               checked="true">
        <label class="form-check-label" >
            To LowerCase
        </label>
    </div>
    <div class="form-check">
        <input class="form-check-input"
               type="radio"
               name="radioPattern"
               @onchange="(e) => CheckedValueChanged(e, 2)"
               checked="true">
        <label class="form-check-label">
            To UpperCase
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input"
               type="radio"
               name="radioPattern"
               @onchange="(e) => CheckedValueChanged(e, 4)">
        <label class="form-check-label">
            Regex Pattern
        </label>
    </div>

    <div class="form-group">
        <label for="inputAddress">@LblText</label>
        <input type="text"
               class="form-control"
               placeholder="Text"
               @onchange="TextValueChanged"
               disabled="@IsTextEnabled">
    </div>

    <div class="form-group">
        <label for="inputAddress">@LblPattern</label>
        <input type="text"
               class="form-control"
               placeholder="Pattern"
               @onchange="RegexValueChanged"
               disabled="@IsPatternEnabled">
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<IOperationContract> CallBack { get; set; }
    private int CheckedValue { get; set; } = 0;
    private string TextValue { get; set; }
    private string Pattern { get; set; }
    private bool IsPatternEnabled { get => CheckedValue == 0 || CheckedValue == 4; }
    private bool IsTextEnabled { get => CheckedValue == 0 || CheckedValue == 4; }
    private string LblText { get => GetLblText(); }

    private string LblPattern { get => GetLblPattern(); }
    private string GetLblPattern()
    =>  CheckedValue switch
        {
            0 => "Text to be replaced",
            1 => "",
            2 => "",
            4 => "Regex Pattern",
            _ => throw new InvalidOperationException(nameof(CheckedValue))
        };
    
    private string GetLblText()
    => CheckedValue switch
    {
        0 => "new text",
        1 => "",
        2 => "",
        4 => "new Text",
        _ => throw new InvalidOperationException(nameof(CheckedValue))
    };

    private void CheckedValueChanged(ChangeEventArgs e, int value)
    {
        CheckedValue = e.Value.Equals("on")
            ? value
            : CheckedValue;

        FormChanged();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            FormChanged();
    }


    private void FormChanged()
    {
        var oc = GetOperationContract();
        CallBack.InvokeAsync(oc);
    }
    private void RegexValueChanged(ChangeEventArgs e)
    {
        Pattern = e.Value.ToString();
        FormChanged();
    }
    private void TextValueChanged(ChangeEventArgs e)
    {
        TextValue = e.Value.ToString();
        FormChanged();
    }

    private IOperationContract GetOperationContract()
    {
        switch (CheckedValue)
        {
            case 0: return new ReplacePattern(Pattern, TextValue, FilePreviewManagerService.FileIdentities, DirectoryManagerService._dir.FullName);
            case 1: return new ToLowerPattern(FilePreviewManagerService.FileIdentities, DirectoryManagerService._dir.FullName);
            case 2: return new ToUpperPattern(FilePreviewManagerService.FileIdentities, DirectoryManagerService._dir.FullName);
            case 4: return new RegexPattern( Pattern , TextValue, FilePreviewManagerService.FileIdentities, DirectoryManagerService._dir.FullName);
            default: throw new InvalidOperationException(nameof(CheckedValue));
        }
    }
}
