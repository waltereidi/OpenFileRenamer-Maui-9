@namespace Presentation.Maui.Components.PreviewOptions
@using ApplicationService.Contracts
@using ApplicationService.Interfaces
@using Presentation.Maui.Service

<div class="border rounded p-3">

    <div class="form-check">
      <input 
          class="form-check-input" 
          type="radio" 
          name="radioAppend" 
          @onchange="(e)=>CheckedValueChanged(e,0)"
          checked>
      <label class="form-check-label" for="AppendAt">
        Append at
      </label>
    </div>
    <div class="form-check">
      <input 
          class="form-check-input" 
          type="radio"
               name="radioAppend"
          @onchange="(e) => CheckedValueChanged(e, 1)">
      <label class="form-check-label" for="AppendToEnd">
        Append to end
      </label>
    </div>

    <div class="form-check">
      <input 
            class="form-check-input" 
            type="radio"
            name="radioAppend"
            @onchange="(e) => CheckedValueChanged(e, 2)">
      <label class="form-check-label" for="AppendToStart">
        Append to start
      </label>
    </div>

    <div class="form-group">
        <label for="inputAddress">Position</label>
        <input 
            type="number" 
            class="form-control" 
            placeholder="Position"
            @onchange="PositionHasChanged"
            disabled="@IsNumberInputEnabled">
    </div>

    <div class="form-group">
        <label for="inputAddress">Text to append</label>
        <input 
            type="text" 
            class="form-control" 
            placeholder="Text to append"
            @onchange="TextValueChanged">
    </div>
</div>


@code {
    [Parameter]
    public EventCallback<IOperationContract> CallBack { get; set; }
    private int Position { get; set; }

    private int CheckedValue { get; set; } = 0;

    private bool IsNumberInputEnabled { get => CheckedValue != 0; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            FormChanged();
    }



    private string TextValue { get; set; }
    private void PositionHasChanged(ChangeEventArgs e)
    {
        Position = int.Parse(e.Value.ToString());
        FormChanged();
    }

    private void TextValueChanged(ChangeEventArgs e )
    {
        TextValue = e.Value.ToString();
        FormChanged();
    }

    private void CheckedValueChanged(ChangeEventArgs e, int value)
    {
        CheckedValue = e.Value.Equals("on")
            ? value
            : CheckedValue;
        FormChanged();
    }

    private void FormChanged()
    {
        var oc = GetOperationContract();
        CallBack.InvokeAsync(oc);
    }

    private IOperationContract GetOperationContract()
    {
        switch(CheckedValue)
        {
            case 0 : return new AppendAt(Position , TextValue , FilePreviewManagerService.FileIdentities, DirectoryManagerService._dir.FullName);
            case 1 : return new AppendToEnd(TextValue, FilePreviewManagerService.FileIdentities, DirectoryManagerService._dir.FullName);
            case 2 : return new AppendToStart(TextValue, FilePreviewManagerService.FileIdentities, DirectoryManagerService._dir.FullName);
            default: throw new InvalidOperationException(nameof(CheckedValue));
        }
    }

}
